ПЕРЕД КАЖДЫМ КОММИТОМ ЛУЧШЕ ДЕЛАТЬ git diff --staged

Показать лог с изменениями

git log -p

Показать лог с коммитами в одну строку

git log --oneline

git log --graph

1. Если работаем с разных компьютеров, перед началом работы нужно всегда делать

git pull --rebase

git rebase перезаписывает историю проекта, создавая новые коммиты для каждого коммита в исходной ветке.

Она создает линейную историю проекта. Т.е. в мастер попадут отдельно все коммиты из той ветки, которую мы в него заливаем.

git rebase -i HEAD~4   - интерактивное изменение порядка коммитов, на 4 коммита ниже HEAD

2. git merge не изменяет существующие ветки, а создает новый коммит со слитыми ветками.

3. git rm <<имя файла>> - удаляет файл и добавляет это удаление в коммит === rm + git add

4. git show <<номер коммита>> - показывает diff файлов в коммите

5. git blame <<имя файла>> - показывает имя того, кто вносил изменения в файл, и номер коммита

6. git grep <<строка>> - ищет строку в файлах проекта

   git grep -i 		 поиск без учета регистра

   git grep <<имя файла>> <<хэш коммита>>	поиск в конкретном коммите

7. Удаление неотслеживаемых файлов.

git clean -fd		# -f – force, -d – directory

Все неотслеживаемые файлы удалятся без возможности их вернуть.

8. Отмена изменений в рабочей директории

git restore <<имя файла>>

9. Убрать файл из индекса

git restore --staged <<имя файла>>

ЧТОБЫ ОТМЕНИТЬ ИЗМЕНЕНИЯ В ФАЙЛАХ ИНДЕКСА, НУЖНО СНАЧАЛА УБРАТЬ ИХ ИЗ ИНДЕКСА, А ЗАТЕМ СДЕЛАТЬ RESTORE (пункт 8)

10. Отмена только что сделанного коммита

git reset --hard HEAD~

без флага --hard коммит вернет все изменения, сделанные в коммите, в рабочую директорию,
а с этим флагом удалится и коммит, и все изменения.

HEAD~  - один последний коммит
HEAD~2 - два последних коммита

11. Отмена всех изменений выбранного коммита

Создает новый коммит, в котором выполнены изменения обратные указанному в команде коммиту

git revert <<хэш коммита>>

12. Добавить файлы в только что сделанный, но еще не запушеный коммит, вместо создания нового

git commit --amend

13. Интерактивное индексирование

git add -i <<имя файла>>

https://git-scm.com/book/ru/v2/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B5-%D0%B8%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5

14. Вернуться в состояние любого коммита 

git checkout <<хэш коммита>>

Вернуться назад в последний коммит 

git switch -

15. Показать текущий коммит 

git show

16. ПЕРЕМЕСТИТЬ СОСТОЯНИЕ любой ветки в нужный коммит

git branch -f master HEAD~3

в данном примере мы перемещаем ветку master на ~ коммитов назад от HEAD

17. Скопировать отдельные коммиты из другой ветки

git cherry-pick <<хэш коммита>> <<хэш коммита>> и т.д.

Выбранные коммиты вольются в ту ветку, из которой мы вызываем эту команду.

18. git stash

git stash 		- скрыть все измененные файлы, чтобы поработать над другими

git stash pop 		- вывести все файлы обратно из stash

19. git commit --amend