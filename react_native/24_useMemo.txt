1. useMemo

Если в компоненте объявляется переменная и ей присваивается значение, она будет присваиваться каждый раз при рендеринге компонента.
Компонент может рендериться заново каждый раз, например, когда обновляется значение через useState.

Если при этом в компоненте присутствует медленная функция, все приложение при каждом повторном рендеринге будет тормозиться исполнением этой медленной функции.

Чтобы такая функция не запускалась каждый раз, несмотря на то, что она отдает один и тот же результат, мы можем поместить ее в useMemo.

useMemo запишет в кэш результат функции и не будет перезапускать ее до тех пор, пока не изменится хотя бы одно значение из ее зависимостей, передаваемых в массиве вторым аргументом.


Пример:

import React, { useState, useMemo } from 'react'

export default function App() {
  
  const [number, setNumber] = useState(0)

  const doubleNumber = useMemo(() => {
    return slowFunction(number)
  }, [number])
}


В данном примере коллбэк внутри useMemo будет исполняться только тогда, когда изменится значение number.

